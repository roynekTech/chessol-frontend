---
description: 
globs: 
alwaysApply: true
---
# Chessol Project Guidelines

## Project Overview
Chessol is a modern chess application with Solana blockchain integration. The app allows users to play chess games, spectate ongoing matches, and integrates with the Solana blockchain for future functionalities like NFTs and tournament staking.

## Design System

### Color Palette
- Primary: Amber to orange gradients (`from-amber-500 to-orange-600`)
- Secondary: Purple tones (`from-purple-700 to-purple-900`)
- Background: Dark gradients with subtle glow effects (`from-gray-900 via-purple-950 to-black`)
- Text: White and gray shades for readability

### Component Styles

#### Buttons
- Primary: `bg-gradient-to-r from-amber-500 to-orange-600 hover:from-amber-600 hover:to-orange-700 text-white font-semibold rounded-full shadow-lg shadow-amber-900/20 transition-all duration-300 transform hover:scale-105`
- Secondary: `bg-black/40 backdrop-blur-sm text-gray-300 border border-gray-700 hover:border-amber-500 hover:text-white rounded-full transition-all duration-300`
- Ghost: `text-gray-300 hover:text-black rounded-full`

#### Cards
- Standard: `bg-gradient-to-b from-black/60 to-black/40 backdrop-blur-sm border border-gray-800 rounded-xl overflow-hidden hover:border-amber-600/40 hover:shadow-lg hover:shadow-amber-900/10 transition-all duration-300`

#### Inputs
- Standard: `bg-black/40 backdrop-blur-sm border border-gray-700 rounded-xl p-3 text-white focus:border-amber-500 focus:ring-1 focus:ring-amber-500/50 transition-all duration-200`

#### Effects
- Glow: `absolute -top-40 -right-40 w-80 h-80 bg-amber-500/10 rounded-full filter blur-3xl pointer-events-none`
- Backdrop blur: `backdrop-blur-sm`
- Shadows: `shadow-lg shadow-amber-900/20`

### Typography
- Primary Headings: `text-3xl md:text-4xl font-bold bg-gradient-to-r from-amber-400 via-orange-500 to-yellow-500 text-transparent bg-clip-text`
- Secondary Headings: `text-2xl font-bold text-white`
- Section Headings: `font-medium text-gray-300 flex items-center`
- Body Text: `text-gray-300` for standard, `text-sm text-gray-400` for smaller text

## Coding Standards

### Organization
- Use atomic design principles: atoms, molecules, organisms
- Keep pages focused on layout and composition; delegate complex logic to hooks
- Extract reusable logic into custom hooks with `use` prefix
- Place pure utility functions in dedicated utils files
- Define types and interfaces in dedicated type files

### Naming Conventions
- Components: PascalCase (e.g., `GameCard`)
- Functions: camelCase (e.g., `handleClick`)
- Constants: UPPER_SNAKE_CASE for true constants, camelCase for config objects
- Files: Match component/hook name; use kebab-case for utils and others
- CSS: Follow Tailwind conventions

### State Management
- Use React context for global state
- Use useState for component-level state
- Extract complex state logic to custom hooks
- Use useMemo and useCallback for expensive operations
- Maintain consistent patterns for loading, error, and success states

### React Patterns
- Prefer functional components over class components
- Use conditional rendering with ternary operators for simple cases
- Extract complex UI sections into separate components
- Prefix event handlers with `handle`, callback props with `on`
- Keep useEffect focused and documented; extract complex logic

## Current Features
- Chess gameplay with stockfish integration
- Game spectator mode
- Multiplayer chess games
- Real-time game updates
- Modern, responsive UI

## Planned Features
- In-game difficulty adjustment
- Game analytics and move suggestions
- User profiles and statistics
- Chat system for players and spectators
- Solana wallet integration
- Chess NFTs for unique pieces and boards
- Tournament system with SOL staking

## Technical Stack
- React
- TypeScript
- Vite
- TailwindCSS
- Framer Motion
- chess.js
- Solana Web3.js (planned)

## Accessibility Guidelines
- Maintain WCAG AA standard for text contrast
- Ensure all interactive elements are keyboard accessible
- Use proper aria labels and semantic HTML
- Respect prefers-reduced-motion settings
- Provide visible focus indicators for all interactive elements


## Improvement Prompt
This cursor rule should be continuously updated as the frontend evolves. When implementing new features, components, or patterns, please update this file with:

1. Any new design elements added to the application
2. Updated component styling guidelines
3. New UI/UX patterns implemented
4. Additional accessibility considerations
5. New React hooks or utilities created
6. Documentation for new frontend features
7. Implementation notes for Solana wallet integration

By keeping this guide updated, we ensure consistent development practices across the team and maintain high-quality code standards as the project grows.





