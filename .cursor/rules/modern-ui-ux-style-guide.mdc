---
description: 
globs: 
alwaysApply: true
---

# Modern UI/UX Design Style Guide

## 1. Design Philosophy & Core Principles

### 1.1 Design Vision

Our designs embrace clarity, purpose, and delight. Every element exists for a reason, contributes to the user journey, and creates memorable experiences through thoughtful details.

### 1.2 Core Principles

- **Clarity First**: Prioritize clear communication over decoration. Users should understand what they can do and how to do it.
- **Purposeful Motion**: Animation and transitions should guide attention and provide feedback, not distract.
- **Cohesive Systems**: Design using connected systems, not isolated screens or components.
- **Contextual Adaptation**: Interfaces should adapt intelligently to different devices, contexts, and user needs.
- **Delightful Details**: Small, surprising moments of delight create emotional connections without compromising usability.
- **Inclusive Design**: Create experiences that are accessible and usable by people with diverse abilities and circumstances.

### 1.3 Brand Integration

- Balance brand expression with usability principles
- Apply brand elements in ways that enhance rather than hinder the experience
- Create recognition through consistent application of brand elements

## 2. Typography

### 2.1 Font Selection

- **Primary Font**: Choose a highly readable sans-serif for UI elements and body text (e.g., Inter, Poppins, SF Pro)
- **Secondary Font**: Consider a complementary font for headlines or accents (optional)
- Limit the total fonts to 2 maximum for cohesion
- Always include appropriate fallbacks in font stacks

### 2.2 Type Scale

- Implement a rational type scale with clear hierarchical relationships
- Standard scale: 12px, 14px, 16px, 18px, 20px, 24px, 30px, 36px, 48px, 60px, 72px
- Maintain a ratio between sizes (suggested: 1.25 or 1.333)
- Use responsive scaling where appropriate

### 2.3 Text Styles

- **Headlines**: Bold (600-700 weight), slightly tighter line height (1.1-1.2)
- **Body Text**: Regular weight (400-500), comfortable line height (1.5-1.6)
- **UI Elements**: Medium weight (500-600), standard line height (1.2-1.4)
- **Captions/Small Text**: Regular or medium weight, slightly looser tracking

### 2.4 Type Guidelines

- Maintain a minimum text size of 16px for body text (14px for secondary text)
- Set line length between 45-75 characters for optimal readability
- Ensure sufficient contrast between text and background (WCAG AA minimum)
- Use true italics and weights rather than faux browser rendering when possible

## 3. Color Systems

### 3.1 Primary Palette

- **Primary Brand Color**: Should work in multiple shades, from light to dark
- **Secondary Brand Color**: Complementary to primary, used for accents and variety
- **Neutral Tones**: Sophisticated grays for text, backgrounds, and UI elements

### 3.2 Extended Palette

- **Success**: Green tones for positive actions and confirmations
- **Error/Danger**: Red tones for errors, warnings, and destructive actions
- **Warning**: Amber/yellow tones for cautionary messages
- **Info**: Blue tones for informational elements and progress indicators
- **Additional Accent Colors**: Based on product needs, maintaining harmony

### 3.3 Color Usage

- Define 5-7 shades of each color for consistent usage across the interface
- Darker shades for text, icons, and borders
- Medium shades for buttons, active states, and key UI elements
- Lighter shades for backgrounds, hover states, and subtle indicators

### 3.4 Color Systems

- **Light Mode**: Define default color application for standard interfaces
- **Dark Mode**: Create properly inverted palette with adjusted saturations and values
- **High Contrast Mode**: Support accessibility needs with enhanced contrasts
- **Themed Variations**: Document how colors shift for themed instances

### 3.5 Color Accessibility

- Ensure all text meets WCAG 2.1 AA standards (minimum 4.5:1 for normal text, 3:1 for large text)
- Test color combinations for color blindness compatibility
- Never rely on color alone to convey meaning or state

## 4. Layout & Spacing

### 4.1 Grid System

- Implement a flexible 12-column grid system for standard layouts
- Use 8px as the base unit for the grid (8px × 8 = 64px column + gutter)
- Maintain consistent gutters between columns (suggested: 16px or 24px)
- Define responsive breakpoints that adapt the grid appropriately

### 4.2 Spacing Scale

- Base all spacing on an 8px grid
- Standard scale: 4px, 8px, 16px, 24px, 32px, 48px, 64px, 96px, 128px
- Use the 4px unit sparingly, primarily for tight internal spacing
- Apply spacing consistently between similar elements

### 4.3 Layout Principles

- **Proximity**: Group related items together
- **Alignment**: Align elements to create visual order
- **Consistency**: Maintain predictable patterns throughout the interface
- **Contrast**: Use space to create emphasis and guide attention
- **White Space**: Embrace emptiness to create focus and reduce cognitive load

### 4.4 Container Styles

- Define standard container widths for different screen sizes
- Implement consistent padding inside containers across the interface
- Create reusable container styles with appropriate max-widths

### 4.5 Composition Patterns

- **Z-Pattern**: For marketing content and landing pages
- **F-Pattern**: For content-heavy pages and search results
- **Card Layouts**: For collections of similar content
- **List Views**: For dense information presentation

## 5. Components & Elements

### 5.1 Core Components

#### 5.1.1 Buttons

- **Primary**: High visibility, used for main actions
- **Secondary**: Less emphasis, for secondary actions
- **Tertiary/Text**: Minimal emphasis, for less important actions
- **Icon**: For space-constrained areas or common actions
- Consistent padding (horizontal padding ~2× vertical padding)
- Clear hover, focus, active, and disabled states

#### 5.1.2 Form Elements

- **Text Inputs**: With consistent styling for placeholder, focus, invalid states
- **Selection Controls**: Dropdowns, radio buttons, checkboxes with clear states
- **Toggles & Sliders**: For binary choices or range selection
- **Labels**: Consistently positioned (typically above fields)
- **Validation**: Clear error and success indicators

#### 5.1.3 Navigation

- **Primary Navigation**: Main user paths
- **Secondary Navigation**: Supplementary options
- **Breadcrumbs**: For complex hierarchies
- **Pagination**: For sequential content
- **Search**: With appropriate affordances and results presentation

#### 5.1.4 Content Containers

- **Cards**: For discrete content chunks
- **Lists**: For sequential information
- **Tables**: For structured data
- **Panels & Sections**: For grouping related content
- **Tabs & Accordions**: For organizing related but separate content

#### 5.1.5 Feedback & Messaging

- **Notifications**: Transient messages for user feedback
- **Alerts**: Persistent messages requiring attention
- **Tooltips**: For supplementary information
- **Popovers**: For related actions or information
- **Modals & Dialogs**: For interruptions requiring focused attention or decisions

### 5.2 Component States

- **Default**: Base appearance
- **Hover**: Visual feedback for pointing devices
- **Focus**: Clear indication for keyboard navigation
- **Active/Pressed**: Momentary feedback during interaction
- **Selected/Checked**: Persistent selected state
- **Disabled**: Visually distinct but recognizable
- **Loading**: Indicates processing with appropriate animations
- **Error**: Clearly indicates issues requiring attention

### 5.3 Component Guidelines

- Create components using atomic design methodology (atoms, molecules, organisms)
- Document component variants, states, and responsive behaviors
- Define consistent internal spacing within components
- Establish conventions for component interactions and behaviors

## 6. Interaction Design

### 6.1 Affordances

- Make interactive elements visibly different from non-interactive ones
- Use established patterns for common interactions (e.g., underlined links)
- Provide hover effects that suggest interactivity
- Maintain sufficient target sizes (minimum 44×44px for touch)

### 6.2 Feedback

- Every action should receive immediate visual feedback
- Use appropriate loading indicators for processes over 400ms
- Provide success confirmations for completed actions
- Show helpful error messages when things go wrong

### 6.3 Consistency Patterns

- Apply the same interaction patterns to similar elements
- Maintain predictable behaviors across the interface
- Follow platform conventions where appropriate
- Create and document custom patterns when necessary

### 6.4 Micro-interactions

- Use subtle animations to reinforce causality
- Design transitions between states that clarify relationships
- Create moments of delight at appropriate touchpoints
- Document timing and easing for consistent motion

## 7. Accessibility

### 7.1 Inclusivity Principles

- Design for diverse abilities from the beginning, not as an afterthought
- Test with assistive technologies regularly
- Consider situational accessibility (temporary limitations, environmental factors)
- Follow WCAG 2.1 AA standards minimally, aim for AAA where possible

### 7.2 Keyboard Navigation

- Ensure all interactive elements are keyboard accessible
- Implement logical tab order matching visual layout
- Provide visible focus indicators (beyond browser defaults)
- Support standard keyboard shortcuts and patterns

### 7.3 Screen Readers

- Provide appropriate ARIA roles, states, and properties
- Write meaningful alt text for images
- Create semantic HTML structure
- Test with popular screen readers (NVDA, VoiceOver, JAWS)

### 7.4 Additional Considerations

- Support text resizing up to 200% without loss of functionality
- Ensure functionality works with zoom up to 400%
- Avoid reliance on complex motor skills
- Design for users with cognitive limitations

## 8. Responsive Design

### 8.1 Device Strategy

- Mobile-first approach as design foundation
- Optimize for touch on all devices, not just mobile
- Define core breakpoints (typical: 480px, 768px, 1024px, 1280px, 1440px+)
- Consider device capabilities beyond screen size

### 8.2 Layout Adaptation

- Stack elements vertically on smaller screens
- Implement appropriate content prioritization per device
- Adjust spacing scales proportionally across breakpoints
- Consider alternative navigation patterns for mobile

### 8.3 Component Responsiveness

- Document how each component adapts across breakpoints
- Adjust typography scale for different screen sizes
- Modify interaction targets for touch vs. pointer input
- Consider performance implications of complex components

### 8.4 Content Strategy

- Prioritize content differently across device types
- Consider progressive disclosure for complex information
- Adapt media (images, video) for different viewport sizes and connections
- Implement appropriate content truncation strategies

## 9. Animation & Motion

### 9.1 Purpose-Driven Motion

- Use animation to convey meaning, not merely for decoration
- Guide attention to important elements or changes
- Provide feedback about system status and actions
- Create spatial relationships between elements and states

### 9.2 Motion Principles

- **Informative**: Motion should communicate purpose and meaning
- **Natural**: Follow principles of physics for believable motion
- **Appropriate**: Match the character of the product and context
- **Economical**: Use motion judiciously, avoiding overwhelming animations

### 9.3 Animation Specifications

- **Duration**: Short (150-200ms) for small UI elements, longer (300-500ms) for larger transitions
- **Easing**: Use natural easing curves (ease-out for entering, ease-in for exiting)
- **Properties**: Prefer animating opacity and transform properties for performance
- **Timing**: Stagger related animations slightly for natural feeling

### 9.4 Motion System

- Create a library of standard animations for common scenarios
- Define relationships between animation complexity and importance
- Document when animations should be reduced or disabled (user preferences, reduced motion)
- Establish a system for coordinating multiple animations

## 10. Visual Assets & Imagery

### 10.1 Iconography

- **Style**: Consistent weight, corner radius, and level of detail
- **Sizing**: Standard sizes (16px, 20px, 24px, 32px) with consistent padding
- **Grid**: Design icons on a consistent grid system
- **Format**: Prefer SVG for scalability and control

### 10.2 Illustration

- Define a consistent illustration style that aligns with brand
- Create guidelines for character design, environments, and objects
- Establish color usage specific to illustrations
- Document accessibility considerations for illustrative content

### 10.3 Photography

- Define photographic style (lighting, composition, subject matter)
- Establish color grading and processing guidelines
- Document cropping and framing conventions
- Consider diverse representation in imagery

### 10.4 Data Visualization

- Create consistent styling for charts, graphs, and data displays
- Define color usage specific to data categories
- Establish annotation and labeling conventions
- Document accessibility requirements for data representations

## 11. Voice & Tone

### 11.1 Content Principles

- **Clear**: Prioritize clarity and simplicity
- **Concise**: Value users' time and attention
- **Useful**: Focus on information that helps users accomplish tasks
- **Conversational**: Write like a helpful human, not a system

### 11.2 UI Text Guidelines

- Write button labels that describe the action, not generic terms
- Create consistent terminology across the interface
- Use sentence case for most UI elements
- Keep error messages helpful and non-technical

### 11.3 Content Patterns

- Define patterns for common content types (empty states, errors, confirmations)
- Establish standards for help text and instructions
- Document tone adjustments for different scenarios (errors vs. success)
- Create guidelines for internationalization and localization

## 12. Implementation & Tooling

### 12.1 Design System Management

- Establish version control and release processes
- Document contribution guidelines
- Create handoff specifications for development
- Establish QA processes for design system changes

### 12.2 Code Standards

- Use semantic HTML structure
- Implement consistent CSS organization (BEM, ITCSS, or similar)
- Define JavaScript component architecture
- Document integration with frameworks and libraries

### 12.3 Asset Delivery

- Establish naming conventions for all assets
- Define export specifications for different asset types
- Document optimization requirements
- Create processes for asset versioning and updates

### 12.4 Technical Considerations

- Address browser and device support standards
- Document performance budgets and optimization techniques
- Establish accessibility testing protocols
- Define analytics implementation standards

## 13. Design Process

### 13.1 Research Integration

- Establish when and how user research informs design decisions
- Document methods for translating research into design artifacts
- Create frameworks for evaluating design against user needs
- Define processes for continuous improvement based on data

### 13.2 Design Operations

- Document design critique processes
- Establish collaborative workflows between disciplines
- Define decision-making frameworks for design choices
- Create standards for design documentation and communication

### 13.3 Governance

- Establish ownership and maintenance responsibilities
- Define processes for evolving the design system
- Document exception handling for unique requirements
- Create quality assurance processes for design implementation

## 14. Applied Examples

### 14.1 Page Templates

- Document common page layouts and their applications
- Define content placement strategies for different page types
- Establish navigation patterns appropriate to different contexts
- Create examples of responsive implementations

### 14.2 User Flows

- Document standard patterns for common user journeys
- Define transition and animation strategies between steps
- Establish error handling and recovery paths
- Create examples of ideal and alternative paths

### 14.3 Cross-Platform Adaptations

- Document platform-specific considerations for web, iOS, Android
- Define shared elements vs. platform-specific patterns
- Establish guidelines for maintaining brand consistency across platforms
- Create examples of successful platform adaptations

---

## Implementation Checklist

Use this checklist to ensure comprehensive implementation of the style guide:

- [ ] Typography system implemented and documented
- [ ] Color system defined with accessibility verification
- [ ] Spacing system applied consistently
- [ ] Layout grid established and utilized
- [ ] Core components built and documented
- [ ] Component states comprehensively addressed
- [ ] Interaction patterns tested and refined
- [ ] Accessibility standards verified
- [ ] Responsive behaviors implemented and tested
- [ ] Animation system applied appropriately
- [ ] Asset libraries built and optimized
- [ ] Content guidelines followed consistently
- [ ] Code standards established and maintained
- [ ] Design processes documented and followed
- [ ] Governance model actively managed

## Style Guide Maintenance

This document should be treated as a living resource, updated regularly as:

- New design patterns emerge and are validated
- User research reveals opportunities for improvement
- Technical capabilities evolve
- Brand strategy develops

Updates should be versioned, documented, and communicated to all stakeholders.
